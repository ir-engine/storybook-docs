import{N as k}from"./AuthService-CgpOViw1.js";import{i as v,d as E,a,e as m,g as u,u as w}from"./WebRTCTransportFunctions-mB_FREj1.js";import{r as f}from"./index-DPzuYzxM.js";import{d as C,S as s,u as b,a as I,f as L,g as D,i as y,U as N}from"./UUIDComponent-GqVY2Xw8.js";import{d as M,e as g,s as U,I as A,X as O,G as c,f as d}from"./resourceLoaderHooks-CRL4d032.js";import{a as R}from"./three.module-BizNiMhn.js";import{i as h,a as _}from"./index-DNUDjAZy.js";const p=(t,e)=>{var o;if(a(L).isEditing)return;const n=D(t,i);e&&((o=e.session)==null||o.end()),typeof window=="object"&&window&&n.newTab?!window.open(n.url,"_blank")&&h&&_&&g(t,i,"WINDOW_BLOCKED","Unable to open link in new tab."):window.location.href=n.url},B=t=>{var n;if(console.log("linkCallback"),(n=A.getButtons(t).XRStandardGamepadTrigger)!=null&&n.down){const o=a(O);p(t,o)}else p(t,void 0)};new R;const P="Click to follow",S="linkCallback",j=E({name:"LinkState",initial:{location:void 0}}),i=C({name:"LinkComponent",jsonID:"EE_link",schema:s.Object({url:s.String(),sceneNav:s.Bool(),location:s.String(),newTab:s.Bool({default:!0})}),linkCallbackName:S,linkCallback:B,interactMessage:P,errors:["INVALID_URL","WINDOW_BLOCKED"],reactor:function(){if(!v)return null;const t=b(),e=I(t,i);return f.useEffect(()=>{if(M(t,i),!e.sceneNav.value)try{new URL(e.url.value)}catch{return g(t,i,"INVALID_URL","Please enter a valid URL.")}},[e.url,e.sceneNav]),f.useEffect(()=>{U(t,S,()=>i.linkCallback(t))},[]),null}}),r=E({name:"EditorState",initial:()=>({projectName:null,sceneName:null,scenePath:null,sceneAssetID:null,panelLayout:{},rootEntity:y,uiEnabled:!0,uiMode:"ADVANCED",canvasRef:null,activeLowerPanel:"properties"}),setActiveLowerPanel:t=>{u(r).activeLowerPanel.set(t)},useIsModified:()=>{const t=w(u(r).rootEntity).value,e=m(d);return t?!!e[c.getSourceID(t)].value:!1},isModified:()=>{const t=a(r).rootEntity;return t?!!a(d)[c.getSourceID(t)]:!1},markModifiedScene:t=>{const e=c.getSourceID(t);if(!e)return;const n=u(d);n[e].set(!0);const o=a(r).rootEntity,l=c.getSourceID(o);l!==e&&n[l].set(!0)},isInActiveScene:t=>{const e=a(r).rootEntity;return N.getSourceEntity(t)===e},reactor:()=>{const t=m(j);return f.useEffect(()=>{t.location.value&&(k.dispatchNotify("Scene navigation is disabled in the studio",{variant:"warning"}),t.location.set(void 0))},[t.location]),null}});export{r as E,i as L};
